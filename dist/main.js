!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s="./src/index.js")}({"./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */function(module,exports){eval("const iconElement = document.querySelector('.weatherIcon');\nconst tempElement = document.querySelector('.temperature p');\nconst descElement = document.querySelector('.temperatureDescription p');\nconst locationElement = document.querySelector('.location p');\nconst notificationElement = document.querySelector('.notification');\n\nconst weather = {};\n\nweather.temperature = {\n  unit: 'celsius'\n};\n\nconst KELVIN = 273;\n\nconst key = '82005d27a116c2880c8f0fcb866998a0';\n\nif ('geolocation' in navigator) {\n  navigator.geolocation.getCurrentPosition(setPosition, showError);\n} else {\n  notificationElement.style.display = 'block';\n  notificationElement.innerHTML = \"<p>Browser doesn't Support Geolocation</p>\";\n}\n\nfunction setPosition(position) {\n  let latitude = position.coords.latitude;\n  let longitude = position.coords.longitude;\n\n  getWeather(latitude, longitude);\n}\n\nfunction showError(error) {\n  notificationElement.style.display = 'block';\n  notificationElement.innerHTML = `<p> ${error.message} </p>`;\n}\n\nfunction getWeather(latitude, longitude) {\n  let api = `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${key}`;\n\n  fetch(api)\n    .then(function(response) {\n      let data = response.json();\n      return data;\n    })\n    .then(function(data) {\n      weather.temperature.value = Math.floor(data.main.temp - KELVIN);\n      weather.description = data.weather[0].description;\n      weather.iconId = data.weather[0].icon;\n      weather.city = data.name;\n      weather.country = data.sys.country;\n    })\n    .then(function() {\n      displayWeather();\n    });\n}\n\nfunction displayWeather() {\n  iconElement.innerHTML = `<img src=\"icons/${weather.iconId}.png\"/>`;\n  tempElement.innerHTML = `${weather.temperature.value}°<span>C</span>`;\n  descElement.innerHTML = weather.description;\n  locationElement.innerHTML = `${weather.city}, ${weather.country}`;\n}\n\nfunction celsiusToFahrenheit(temperature) {\n  return (temperature * 9) / 5 + 32;\n}\n\ntempElement.addEventListener('click', function() {\n  if (weather.temperature.value === undefined) return;\n\n  if (weather.temperature.unit == 'celsius') {\n    let fahrenheit = celsiusToFahrenheit(weather.temperature.value);\n    fahrenheit = Math.floor(fahrenheit);\n\n    tempElement.innerHTML = `${fahrenheit}°<span>F</span>`;\n    weather.temperature.unit = 'fahrenheit';\n  } else {\n    tempElement.innerHTML = `${weather.temperature.value}°<span>C</span>`;\n    weather.temperature.unit = 'celsius';\n  }\n});\n\n\n//# sourceURL=webpack:///./src/index.js?")}});